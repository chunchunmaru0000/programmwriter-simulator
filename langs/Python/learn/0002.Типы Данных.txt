Переменная хранит данные одного из типов данных. В Python существует множество различных типов данных. В данном случае рассмотрим только самые базовые типы: bool, int, float, complex и str.
Логические значения

[b]Тип bool[/b] представляет два логических значения: True (верно, истина) или False (неверно, ложь). Значение True служит для того, чтобы показать, что что-то истинно. Тогда как значение False, наоборот, показывает, что что-то ложно. Пример переменных данного типа:
<code///>
isMarried = False
print(isMarried)    # False
 
isAlive = True
print(isAlive)      # True
<code///>
Целые числа

[b]Тип int[/b] представляет целое число, например, 1, 4, 8, 50. Пример
<code///>
age = 21
print("Возраст:", age)    # Возраст: 21
 
count = 15
print("Количество:", count) # Количество: 15
<code///>
По умолчанию стандартные числа расцениваются как числа в десятичной системе. Но Python также поддерживает числа в двоичной, восьмеричной и шестнадцатеричной системах.

Для указания, что число представляет двоичную систему, перед числом ставится префикс 0b:
<code///>	
a = 0b11
b = 0b1011
c = 0b100001
print(a)    # 3 в десятичной системе
print(b)    # 11 в десятичной системе
print(c)    # 33 в десятичной системе
<code///>
Для указания, что число представляет восьмеричную систему, перед числом ставится префикс 0o:
<code///>
a = 0o7
b = 0o11
c = 0o17
print(a)    # 7 в десятичной системе
print(b)    # 9 в десятичной системе
print(c)    # 15 в десятичной системе
<code///>
Для указания, что число представляет шестнадцатеричную систему, перед числом ставится префикс 0x:
<code///>	
a = 0x0A
b = 0xFF
c = 0xA1
print(a)    # 10 в десятичной системе
print(b)    # 255 в десятичной системе
print(c)    # 161 в десятичной системе
<code///>
Стоит отметить, что в какой-бы системе мы не передали число в функцию print для вывода на консоль, оно по умолчанию будет выводиться в десятичной системе.
Дробные числа

Тип float представляет число с плавающей точкой, например, 1.2 или 34.76. В качесте разделителя целой и дробной частей используется точка.
<code///>	
height = 1.68
pi = 3.14
weight = 68.
print(height)   # 1.68
print(pi)       # 3.14
print(weight)   # 68.0
<code///>
Число с плавающей точкой можно определять в экспоненциальной записи:
<code///>	
x = 3.9e3
print(x)  # 3900.0
 
x = 3.9e-3
print(x)  # 0.0039
<code///>
[b]Число float[/b] может иметь только 18 значимых символов. Так, в данном случае используются только два символа - 3.9. И если число слишком велико или слишком мало, то мы можем записывать число в подобной нотации, используя экспоненту. Число после экспоненты указывает степень числа 10, на которое надо умножить основное число - 3.9.
Комплексные числа

Тип complex представляет комплексные числа в формате вещественная_часть+мнимая_частьj - после мнимой части указывается суффикс j
<code///>	
complexNumber = 1+2j
print(complexNumber)   # (1+2j)
<code///>
Строки

[b]Тип str[/b] представляет строки. Строка представляет последовательность символов, заключенную в одинарные или двойные кавычки, например "hello" и 'hello'. В Python 3.x строки представляют набор символов в кодировке Unicode
<code///>	
message = "Hello World!"
print(message)  # Hello World!
 
name = 'Tom'
print(name)  # Tom
<code///>
При этом, если строка имеет много символов, ее можно разбить на части и эти части разместить на разных строках кода. В этом случае вся строка заключается в круглые скобки, а ее отдельные части - в кавычки:
<code///>	
text = ("Laudate omnes gentes laudate "
        "Magnificat in secula ")
print(text)
<code///>
Если же мы хотим определить многострочный текст, то такой текст заключается в тройные двойные или одинарные кавычки:
<code///>	
'''
Это комментарий
'''
text = '''Laudate omnes gentes laudate
Magnificat in secula
Et anima mea laudate
Magnificat in secula 
'''
print(text)
<code///>
При использовани тройных одинарных кавычек не стоит путать их с комментариями: если текст в тройных одинарных кавычках присваивается переменной, то это строка, а не комментарий.
Управляющие последовательности в строке

Строка может содержать ряд специальных символов - управляющих последовательностей. Некоторые из них:

    \\: позволяет добавить внутрь строки слеш

    \': позволяет добавить внутрь строки одинарную кавычку

    \": позволяет добавить внутрь строки двойную кавычку

    \n: осуществляет переход на новую строку

    \t: добавляет табуляцию (4 отступа)

Применим несколько последовательностей:
<code///>	
text = "Message:\n\"Hello World\""
print(text)
<code///>
Консольный вывод программы:

Message:
"Hello World"

Хотя подобные последовательности могут нам помочь в некоторых делах, например, поместить в строку кавычку, сделать табуляцию, перенос на другую строку. Но они также могут и мешать. Например:
<code///>	
path = "C:\python\name.txt"
print(path)
<code///>
Здесь переменная path содержит некоторый путь к файлу. Однако внутри строки встречаются символы "\n", которые будут интерпретированы как управляющая последовательность. Так, мы получим следующий консольный вывод:

C:\python
ame.txt

Чтобы избежать подобной ситуации, перед строкой ставится символ r
<code///>
path = r"C:\python\name.txt"
print(path)
<code///>
Вставка значений в строку

Python позволяет встравивать в строку значения других переменных. Для этого внутри строки переменные размещаются в фигурных скобках {}, а перед всей строкой ставится символ f:
<code///>
userName = "Tom"
userAge = 37
user = f"name: {userName}  age: {userAge}"
print(user)   # name: Tom  age: 37
<code///>
В данном случае на место {userName} будет вставляться значение переменной userName. Аналогично на вместо {userAge} будет вставляться значение переменной userAge.
Динамическая типизация

Python является языком с динамической типизацией. А это значит, что переменная не привязана жестко к определенному типу.

Тип переменной определяется исходя из значения, которое ей присвоено. Так, при присвоении строки в двойных или одинарных кавычках переменная имеет тип str. При присвоении целого числа Python автоматически определяет тип переменной как int. Чтобы определить переменную как объект float, ей присваивается дробное число, в котором разделителем целой и дробной части является точка.

При этом в процессе работы программы мы можем изменить тип переменной, присвоив ей значение другого типа:
<code///>	
userId = "abc"  # тип str
print(userId)
 
userId = 234  # тип int
print(userId)
<code///>
С помощью встроенной функции type() динамически можно узнать текущий тип переменной:
<code///>	
userId = "abc"      # тип str
print(type(userId)) # <class 'str'>

userId = 234        # тип int
print(type(userId)) # <class 'int'>
<code///>