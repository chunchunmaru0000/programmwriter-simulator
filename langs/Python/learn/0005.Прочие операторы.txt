[b]Логические операторы[/b]
Это союзы, которые позволяют объединять по несколько условий. В Python есть всего три оператора: and (и), or (или) и not (не).
[b]И (and)[/b]
Если условия с двух сторон оператора and истинны, тогда все выражение целиком считается истинным.
Пример:<code///>
>>> a = 7 > 7 and 2 > -1
>>> print(a)
False<code///>
[b]Или (or)[/b]
Выражение ложно, если оба операнда с двух сторон ложные. Если хотя бы одно из них истинное, то и все выражение истинно.
Пример:<code///>
>>> a = 7 > 7 or 2 > -1
>>> print(a)
True<code///>
[b]Не (not)[/b]
Этот оператор инвертирует булевые значения выражения. True превращается в False и наоборот. В примере внизу булево значение 0 — False. Поэтому оно превращается в True.
Пример:<code///>
>>> a = not(0)
>>> print(a)
True<code///>
[b]Операторы принадлежности[/b]
Эти операторы проверяют, является ли значение частью последовательности. Последовательность может быть списком, строкой или кортежем. Есть всего два таких оператора: in и not in.
[b]В (in)[/b]
Проверяет, является ли значение членом последовательности. В этом примере видно, что строки fox нет в списке питомцев. Но cat — есть, поэтому она возвращает True. Также строка me является подстрокой disappointment. Поэтому она вернет True.
Пример:<code///>
>>> pets=['dog','cat', 'ferret']
>>> 'fox' in pets
False
>>> 'cat' in pets
True
>>> 'me' in 'disappointment'
True<code///>
[b]Нет в (not in)[/b]
Этот оператор проверяет, НЕ является ли значение членом последовательности.
Пример:<code///>
>>> 'pot' not in 'disappointment'
True<code///>
[b]Операторы тождественности[/b]
Эти операторы проверяют, являются ли операнды одинаковыми (занимают ли они одну и ту же позицию в памяти).
[b]Это (is)[/b]
Если операнды тождественны, то вернется True. В противном случае — False. Здесь 2 не является 20, поэтому вернется False. Но '2' — это то же самое, что и "2". Разные кавычки не меняют сами объекты, поэтому вернется True.
Пример:<code///>
>>> 2 is 20
False
>>> '2' is "2"
True<code///>
[b]Это не (is not)[/b]
2 — это число, а '2' — строка. Поэтому вернется True.
Пример:<code///>
>>> 2 is not '2'
True<code///>